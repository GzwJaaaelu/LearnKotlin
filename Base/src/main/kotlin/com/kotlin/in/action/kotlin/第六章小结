1.Kotlin 对可空类型的支持，可以帮助我们在编译期，检测出潜在的 NullPointerException 错误。
2.Kotlin 提供了像安全调用（?.）、Elvis 运算符（?:）、非空断言（!!）及 let 函数这样的工具来简洁的处理可空类型。
3.as? 运算符提供了一种简单的方式来把值转换成一个类型，以及处理当它拥有不同类型时的情况。
4.Java 中的类型在 Kotlin 中被解释成平台类型，允许开发者把他们当做可空或非空来对待。
5.表示基本数字的类型（如 Int）看起来用起来都像普通的类，但通常会被编译成 Java 基本数据类型。
6.可空基本类型（如 Int?）对应着 Java 中的装箱基本数据类型（如 Integer）。
7.Any 类型是所有其他类型的超类型，类型于 Java 中的 Object。而 Unit 类比于 void。
8.不会正常终于的函数使用 Nothing 类型作为返回类型。
9.Kotlin 使用标准 Java 集合类，并通过区分只读和可变集合来增强它们。
10.当你在 Kotlin 中继承 Java 类或者实现 Java 接口时，你需要仔细考虑参数的可空性和可变性。
11.Kotlin 的 Array 类就像普通的泛型类，但它会被编译成 Java 数组。
12.基本数据类型的数组使用像 IntArray 这样的特殊类来表示。